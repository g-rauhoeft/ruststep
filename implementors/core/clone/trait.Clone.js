(function() {var implementors = {};
implementors["espr"] = [{"text":"impl&lt;'a, P:&nbsp;Clone, O1, O2, F:&nbsp;Clone&gt; Clone for Map&lt;'a, P, O1, O2, F&gt;","synthetic":false,"types":[]},{"text":"impl Clone for AttributeDecl","synthetic":false,"types":[]},{"text":"impl Clone for EntityAttribute","synthetic":false,"types":[]},{"text":"impl Clone for DeriveClause","synthetic":false,"types":[]},{"text":"impl Clone for DerivedAttribute","synthetic":false,"types":[]},{"text":"impl Clone for WhereClause","synthetic":false,"types":[]},{"text":"impl Clone for DomainRule","synthetic":false,"types":[]},{"text":"impl Clone for Entity","synthetic":false,"types":[]},{"text":"impl Clone for EntityBody","synthetic":false,"types":[]},{"text":"impl Clone for InverseClause","synthetic":false,"types":[]},{"text":"impl Clone for InverseAttribute","synthetic":false,"types":[]},{"text":"impl Clone for AggregationOption","synthetic":false,"types":[]},{"text":"impl Clone for UniqueClause","synthetic":false,"types":[]},{"text":"impl Clone for UniqueRule","synthetic":false,"types":[]},{"text":"impl Clone for Element","synthetic":false,"types":[]},{"text":"impl Clone for RelationOperator","synthetic":false,"types":[]},{"text":"impl Clone for UnaryOperator","synthetic":false,"types":[]},{"text":"impl Clone for BinaryOperator","synthetic":false,"types":[]},{"text":"impl Clone for IntervalOperator","synthetic":false,"types":[]},{"text":"impl Clone for QualifiableFactor","synthetic":false,"types":[]},{"text":"impl Clone for Function","synthetic":false,"types":[]},{"text":"impl Clone for BuiltInFunction","synthetic":false,"types":[]},{"text":"impl Clone for Qualifier","synthetic":false,"types":[]},{"text":"impl Clone for BuiltInConstant","synthetic":false,"types":[]},{"text":"impl Clone for Expression","synthetic":false,"types":[]},{"text":"impl Clone for Logical","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for Remark","synthetic":false,"types":[]},{"text":"impl Clone for Schema","synthetic":false,"types":[]},{"text":"impl Clone for Declaration","synthetic":false,"types":[]},{"text":"impl Clone for FormalParameter","synthetic":false,"types":[]},{"text":"impl Clone for Constant","synthetic":false,"types":[]},{"text":"impl Clone for Rule","synthetic":false,"types":[]},{"text":"impl Clone for LocalVariable","synthetic":false,"types":[]},{"text":"impl Clone for InterfaceSpec","synthetic":false,"types":[]},{"text":"impl Clone for Statement","synthetic":false,"types":[]},{"text":"impl Clone for RepeatControl","synthetic":false,"types":[]},{"text":"impl Clone for RepeatIncrement","synthetic":false,"types":[]},{"text":"impl Clone for Constraint","synthetic":false,"types":[]},{"text":"impl Clone for SubTypeDecl","synthetic":false,"types":[]},{"text":"impl Clone for SuperTypeExpression","synthetic":false,"types":[]},{"text":"impl Clone for SubTypeConstraint","synthetic":false,"types":[]},{"text":"impl Clone for SyntaxTree","synthetic":false,"types":[]},{"text":"impl Clone for ConcreteType","synthetic":false,"types":[]},{"text":"impl Clone for Bound","synthetic":false,"types":[]},{"text":"impl Clone for EnumerationType","synthetic":false,"types":[]},{"text":"impl Clone for ParameterType","synthetic":false,"types":[]},{"text":"impl Clone for SelectType","synthetic":false,"types":[]},{"text":"impl Clone for WidthSpec","synthetic":false,"types":[]},{"text":"impl Clone for SimpleType","synthetic":false,"types":[]},{"text":"impl Clone for Extensiblity","synthetic":false,"types":[]},{"text":"impl Clone for TypeDecl","synthetic":false,"types":[]},{"text":"impl Clone for ConstructedType","synthetic":false,"types":[]},{"text":"impl Clone for UnderlyingType","synthetic":false,"types":[]},{"text":"impl Clone for Entity","synthetic":false,"types":[]},{"text":"impl Clone for EntityAttribute","synthetic":false,"types":[]},{"text":"impl Clone for IdentifierType","synthetic":false,"types":[]},{"text":"impl Clone for TypeRef","synthetic":false,"types":[]},{"text":"impl Clone for Namespace","synthetic":false,"types":[]},{"text":"impl Clone for Schema","synthetic":false,"types":[]},{"text":"impl Clone for ScopeType","synthetic":false,"types":[]},{"text":"impl Clone for Scope","synthetic":false,"types":[]},{"text":"impl Clone for IR","synthetic":false,"types":[]}];
implementors["ruststep"] = [{"text":"impl Clone for Anchor","synthetic":false,"types":[]},{"text":"impl Clone for AnchorItem","synthetic":false,"types":[]},{"text":"impl Clone for DataSection","synthetic":false,"types":[]},{"text":"impl Clone for EntityInstance","synthetic":false,"types":[]},{"text":"impl Clone for Record","synthetic":false,"types":[]},{"text":"impl Clone for UntypedParameter","synthetic":false,"types":[]},{"text":"impl Clone for Parameter","synthetic":false,"types":[]},{"text":"impl Clone for ReferenceEntry","synthetic":false,"types":[]},{"text":"impl Clone for Exchange","synthetic":false,"types":[]},{"text":"impl Clone for URI","synthetic":false,"types":[]},{"text":"impl Clone for LValue","synthetic":false,"types":[]},{"text":"impl Clone for RValue","synthetic":false,"types":[]},{"text":"impl Clone for Logical","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()